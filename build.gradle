plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.9.25'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.25'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
	id "org.sonarqube" version "6.0.1.5171"
}

group = 'br.com.fiap.lanchonete'
version = '0.0.2'

ext {
	springdocVersion = "2.8.1"
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.postgresql:postgresql:42.7.2'
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation 'org.flywaydb:flyway-core:10.15.2'
	implementation 'io.github.microutils:kotlin-logging-jvm:3.0.5'
	implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.12'
	implementation "org.springframework.boot:spring-boot-starter-validation"
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"
	implementation "org.springdoc:springdoc-openapi-starter-common:${springdocVersion}"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
	testImplementation("com.ninja-squad:springmockk:4.0.2") {
		exclude module: 'mockito-core'
	}
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

jacocoTestReport {
	reports {
		xml.required.set(true)
		csv.required.set(true)
		html.required.set(true)
	}

	classDirectories.setFrom(files(classDirectories.files.collect {
		fileTree(dir: it, exclude: [
				'**/br/com/fiap/lanchonete/produto/adapters/config/**',
				'**/br/com/fiap/lanchonete/produto/adapters/input/rest/ErrorController.class',
				'**/br/com/fiap/lanchonete/produto/core/application/services/exceptions/**',
				'**/br/com/fiap/lanchonete/produto/ProdutoApplication.class'])

	}))
}

sonar {
	properties {
		property "sonar.projectKey", "tiagogn_lanchonete-api-produto"
		property "sonar.organization", "fiap-lanchonete-soat8"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.exclusions", "**/build/**," +
				"**/test/**,**/src/test/**," +
				"**/src/main/resources/**," +
				"**/src/main/kotlin/br/com/fiap/lanchonete/produton/adapters/config/**," +
				"**/src/main/kotlin/br/com/fiap/lanchonete/produto/adapters/input/rest/request/**," +
				"**/src/main/kotlin/br/com/fiap/lanchonete/produto/adapters/input/rest/response/**," +
				"src/main/kotlin/br/com/fiap/lanchonete/produto/adapters/input/rest/ErrorController.kt," +
				"**/src/main/kotlin/br/com/fiap/lanchonete/produto/adapters/output/**," +
				"**/ProdutoApplication*"
		property "sonar.coverage.exclusions", "**/build/**," +
				"**/test/**,**/src/test/**," +
				"**/src/main/resources/**," +
				"**/src/main/kotlin/br/com/fiap/lanchonete/produto/adapters/config/**," +
				"**/src/main/kotlin/br/com/fiap/lanchonete/produto/adapters/input/rest/request/**," +
				"**/src/main/kotlin/br/com/fiap/lanchonete/produto/adapters/input/rest/response/**," +
				"src/main/kotlin/br/com/fiap/lanchonete/produto/adapters/input/rest/ErrorController.kt," +
				"**/src/main/kotlin/br/com/fiap/lanchonete/produto/adapters/output/**," +
				"**/ProdutoApplication*"
	}
}
